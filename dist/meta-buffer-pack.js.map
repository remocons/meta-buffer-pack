{"version":3,"file":"meta-buffer-pack.js","sources":["../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../node_modules/base64-js/index.js","../src/meta-buffer-pack.js"],"sourcesContent":["/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import { Buffer } from 'buffer/index.js'\nexport { Buffer } \n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\n\nexport const NB = numberBuffer\n/**\n * Create a typed buffer with a specific type and initial value\n * @param {string} type - Buffer type (8, 16, 32, F, N)\n * @param {number} [initValue=0] - Initial value for the buffer\n * @returns {Buffer} Typed buffer\n * @throws {TypeError} If invalid type or initValue is provided\n */\nexport function numberBuffer(type, initValue = 0) {\n  let buffer\n  if (type === undefined || typeof type !== 'string' || typeof initValue !== 'number') {\n    throw TypeError('invlaid init variablie type name. ')\n  }\n  type = type.toUpperCase()\n\n  if (type.includes('8')) {\n    buffer = Buffer.alloc(1)\n    if (type.includes('I')) buffer.writeInt8(initValue)\n    else buffer.writeUint8(initValue)\n  } else if (type.includes('16')) {\n    buffer = Buffer.alloc(2)\n    if (type.includes('I')) {\n      if (type.includes('L')) buffer.writeInt16LE(initValue)\n      else buffer.writeInt16BE(initValue)\n    } else {\n      if (type.includes('L')) buffer.writeUint16LE(initValue)\n      else buffer.writeUint16BE(initValue)\n    }\n  } else if (type.includes('32')) {\n    buffer = Buffer.alloc(4)\n    if (type.includes('I')) {\n      if (type.includes('L')) buffer.writeInt32LE(initValue)\n      else buffer.writeInt32BE(initValue)\n    } else {\n      if (type.includes('L')) buffer.writeUint32LE(initValue)\n      else buffer.writeUint32BE(initValue)\n    }\n  } else if (type.includes('F')) {\n    buffer = Buffer.alloc(4)\n    if (type.includes('L')) {\n      buffer.writeFloatLE(initValue)\n    } else {\n      buffer.writeFloatBE(initValue)\n    }\n  } else if (type.includes('N')) { // number as string\n    buffer = Buffer.from(String(initValue))\n  } else {\n    console.log(`invalid type: ${type} or initvalue: ${initValue}`)\n  }\n  return buffer\n}\n\n\nexport const MB = metaBuffer\n/**\n * Create a meta buffer with name, type, and initial value\n * @param {string} name - Name of the buffer\n * @param {number|string|Uint8Array|ArrayBuffer|Object|boolean} typeOrData - Data type or value\n * @param {number|string|undefined} [initValue] - Initial value for numeric types\n * @returns {[string, string, Buffer]} metaBufferTuple containing name, buffer type, and buffer\n * @throws {TypeError} If invalid meta buffer type is provided\n */\nexport function metaBuffer(name, typeOrData, initValue) {\n  let buffer\n  let bufferType = 'B'\n  if (typeof typeOrData === 'number') {\n    if (typeof initValue === 'number') {  // initValue 0 should be passed.\n      buffer = Buffer.alloc(typeOrData)\n      if (initValue !== 0) buffer.fill(initValue)\n      bufferType = 'B'\n    } else {\n      buffer = Buffer.from(String(typeOrData))\n      bufferType = 'N'\n    }\n  } else if (typeof typeOrData === 'string' && typeof initValue === 'number') { // number with type.\n    bufferType = typeOrData.toUpperCase() // use explicit type name\n    buffer = numberBuffer(typeOrData, initValue) // notice.  two categories.  n: number string.  8, 16, 32: typed number.\n  } else if (typeof typeOrData === 'string' && initValue === undefined) { //  string buffer\n    buffer = Buffer.from(typeOrData)\n    bufferType = 'S'\n  } else if (typeOrData instanceof Uint8Array && initValue === undefined) { // buffer | Uint8Array\n    // Buffer.from:  Copies the passed buffer data onto a new Buffer instance.\n    // typecasting Uint8Array to Buffer.\n    buffer = (typeOrData instanceof Buffer) ? typeOrData : Buffer.from(typeOrData)\n  } else if (typeOrData instanceof ArrayBuffer && initValue === undefined) { // arrayBuffer\n    // Notice. typedArray is recommended instead of arrayBuffer\n    buffer = Buffer.from(typeOrData)\n  } else if (ArrayBuffer.isView(typeOrData)) { // typedarray buffer\n    buffer = Buffer.from(typeOrData.buffer, typeOrData.byteOffset, typeOrData.byteLength)\n  } else if (typeof typeOrData === 'object' && initValue === undefined) { //   object. like array. stringify\n    buffer = Buffer.from(JSON.stringify(typeOrData))\n    bufferType = 'O'\n  } else if (typeof typeOrData === 'boolean' && initValue === undefined) { //   object. like array. stringify\n    const v = typeOrData ? 1 : 0\n    buffer = Buffer.from([v])\n    bufferType = '!'\n  } else {\n    throw TypeError('invalid meta buffer type')\n  }\n\n  if (typeof name === 'string' && name.includes('#')) name = '' //\n\n  return [name, bufferType, buffer]\n}\n\nexport const MBA = metaBufferArguments\n/**\n * Create meta buffers from arguments\n * @param {...any} args - Arguments to create meta buffers\n * @returns {Array<[string, string, Buffer]>} Array of meta buffer tuples\n */\nexport function metaBufferArguments(...args) {\n  let i = 0\n  const mba = args.map(\n    data => {\n      const argsIndex = i++\n      // tip. MBA use index number as metabuffer's property name.\n      if (typeof data === 'number') {\n        // * JS's primitive Number stored as string.\n        return MB(argsIndex, 'N', data)\n      } else {\n        // typedarray, dataview, array, object, boolean\n        return MB(argsIndex, data)\n      }\n    })\n\n  return mba\n}\n\nexport function parseTypeName(type) {\n  type = type.toUpperCase()\n\n  if (type.includes('8')) {\n    if (type.includes('I')) {\n      return 'int8'\n    } else {\n      return 'uint8'\n    }\n  } else if (type.includes('16')) {\n    if (type.includes('I')) {\n      if (type.includes('L')) {\n        return 'int16_le'\n      } else {\n        return 'int16_be'\n      }\n    } else {\n      if (type.includes('L')) {\n        return 'uint16_le'\n      } else {\n        return 'uint16_be'\n      }\n    }\n  } else if (type.includes('32')) {\n    if (type.includes('I')) {\n      if (type.includes('L')) {\n        return 'int32_le'\n      } else {\n        return 'int32_be'\n      }\n    } else {\n      if (type.includes('L')) {\n        return 'uint32_le'\n      } else {\n        return 'uint32_be'\n      }\n    }\n  } else if (type.includes('F')) {\n    if (type.includes('L')) {\n      return 'float_le'\n    } else {\n      return 'float_be'\n    }\n  } else if (type === 'B') {\n    return 'buffer'\n  } else if (type === 'S') { // string or arguments\n    return 'string'\n  } else if (type === 'N') { // number encoded as string\n    return 'number'\n  } else if (type === 'O') { // object encoded string\n    return 'object'\n  } else if (type === '!') { // boolean  1:true 0:false\n    return 'boolean'\n  } else {\n    throw TypeError('invalid data type')\n  }\n\n}\n\nexport function readTypedBuffer(simpleType, buffer, offset, length) {\n  try {\n    const type = parseTypeName(simpleType)\n    if (type == 'int8') return buffer.readInt8(offset)\n    else if (type === 'uint8') return buffer.readUint8(offset)\n    else if (type === 'int16_le') return buffer.readInt16LE(offset)\n    else if (type === 'int16_be') return buffer.readInt16BE(offset)\n    else if (type === 'uint16_le') return buffer.readUint16LE(offset)\n    else if (type === 'uint16_be') return buffer.readUint16BE(offset)\n    else if (type === 'int32_le') return buffer.readInt32LE(offset)\n    else if (type === 'int32_be') return buffer.readInt32BE(offset)\n    else if (type === 'uint32_le') return buffer.readUint32LE(offset)\n    else if (type === 'uint32_be') return buffer.readUint32BE(offset)\n    else if (type === 'float_le') return buffer.readFloatLE(offset)\n    else if (type === 'float_be') return buffer.readFloatBE(offset)\n\n    else if (type === 'buffer') {\n      return buffer.subarray(offset, offset + length)\n    } else if (type === 'string') {\n      const strBuffer = buffer.subarray(offset, offset + length)\n      return decoder.decode(strBuffer)\n    } else if (type === 'number') {\n      const strNumber = buffer.subarray(offset, offset + length)\n      return Number(decoder.decode(strNumber))\n    } else if (type === 'object') {\n      const objEncoded = buffer.subarray(offset, offset + length)\n      return JSON.parse(decoder.decode(objEncoded))\n    } else if (type === 'boolean') {\n      const v = buffer.readInt8(offset)\n      return v === 1\n    } else {\n      return\n    }\n  } catch (error) {\n    // console.log('MBP:readTypedBuffer obj decoding error.', error)\n  }\n  // any error and invalid data return undefined \n  return\n}\n\n// to join MBA or MB meta list.\nfunction flatArray(args) {\n  let subArr = []\n  const mainArr = args.filter(item => {\n    if (Array.isArray(item[0])) subArr = subArr.concat(item)\n    else return item\n  })\n  return mainArr.concat(subArr)\n}\n\n/**\n * Pack data with metadata\n * @param {...any} args - Data to pack\n * @returns {Buffer} Packed buffer with metadata\n */\nexport function pack(...args) {\n  const bufArr = flatArray(args)\n  // console.log('MBP.pack: flat MB or MBA list', bufArr)\n  let size = 0\n  const info = []\n  let offset = 0\n\n  bufArr.forEach(bufPack => {\n    const [name, type, data] = bufPack\n    size += data.byteLength\n\n    if (typeof name === 'number' || name.length > 0) {\n      // if the item has property name then add meta JSON info.\n      // type of name is Number in MBA.(index number)\n      // type of name is String in MB. except null string.\n      // add additional informative meta info.  \n      info.push([name, type, offset, data.byteLength])\n    }\n    offset = size\n  })\n\n\n  // console.log('MBP.pack meta:', info )\n  let infoEncoded\n  let infoSize\n\n  if (info.length > 0) {\n    let infoStr = JSON.stringify(info)\n    // console.log('pack infoStr , size:', infoStr , infoStr.length )\n    infoEncoded = encoder.encode(infoStr)\n    infoSize = infoEncoded.byteLength\n    size = size + infoSize + 2\n  }\n\n  const buffer = Buffer.alloc(size)\n  offset = 0\n  bufArr.forEach(bufPack => {\n    const buf = bufPack[2]\n    buffer.set(buf, offset)\n    offset += buf.byteLength\n  })\n\n  if (info.length > 0) {\n    buffer.set(infoEncoded, offset)\n    const infoSizeBuff = NB('16', infoSize)\n    buffer.set(infoSizeBuff, offset + infoSize)\n    return buffer\n  } else {\n    return buffer\n  }\n}\n\n\n/**\n * unpack() will use embeded meta info from the binary pack.  \n * You can specify (optional) meta obejct. \n * (It's useful to read pure buffer data.)\n * \n * You can get the meta object from:  getFrame(pack) , meta()\n * @param {Buffer|Uint8Array} binPack binaryData\n * @param {Object} meta *OPTION*  \n * @returns {Object|undefined} success: return Object (include buffer data).   fail: return undefined\n */\n/**\n * Unpack data from buffer using metadata\n * @param {Buffer|Uint8Array} binPack - Binary data to unpack\n * @param {Object} [meta] - Optional metadata object\n * @returns {Object|undefined} Unpacked data or undefined if failed\n */\nexport function unpack(binPack, meta) {\n\n  const infoArr = meta || getMeta(binPack)\n  if (!infoArr) return\n\n  const buffer = Buffer.from(binPack)\n  const binObj = {}\n  let readCounter = 0\n  infoArr.forEach(bufPack => {\n    const [name, type, offset, length] = bufPack\n    let result = readTypedBuffer(type, buffer, offset, length)\n    if (result == undefined) return\n    binObj[name] = result\n    if (length) readCounter += length\n  })\n\n  // Can not define meta for variable size buffer \n  // unpacker support automatic property to read left(did't read) buffers.\n  // console.log(\"######, unpack: buffer \" , readCounter, buffer ,buffer.byteLength)\n  if (meta && buffer.byteLength !== readCounter) {\n    let leftSize = buffer.byteLength - readCounter\n    // console.log('total,left buffer size', buffer.byteLength, leftSize )\n    let result = readTypedBuffer('b', buffer, readCounter, leftSize)\n    if (result == undefined) return\n    binObj[\"$OTHERS\"] = result\n  }\n\n  // set args with values if exist.\n  let mbaIndex = 0;\n  let args = [];\n  while (binObj[mbaIndex]) {\n    args.push(binObj[mbaIndex++])\n  }\n\n  if (args.length > 0) {\n    binObj.args = args\n    binObj.$ = binObj.args\n  }\n  return binObj\n}\n\n\nexport const U8 = parseUint8Array   //alias\n/**\n * \n * @param {any} data \n * @param {Boolean} shareArrayBuffer false(default):  return new( or copied) ArrayBuffer.    true: share the input data's arrayBuffer.\n * @returns {Uint8Array}\n */\n/**\n * Parse data into Uint8Array\n * @param {any} data - Data to parse\n * @param {boolean} [shareArrayBuffer=false] - Whether to share the input data's array buffer\n * @returns {Uint8Array} Parsed Uint8Array\n */\nexport function parseUint8Array(data, shareArrayBuffer = false) {\n  if (data === undefined) throw TypeError('Invalid data type: Undefined')\n  if (typeof data === 'string') {\n    return encoder.encode(data)\n  } else if (typeof data === 'number') { // number -> 1 byte uint8array(number)\n    return Uint8Array.from([data])\n  } else if (data instanceof ArrayBuffer) { // arraybuffer -> wrap uint8array(ab)\n    if (shareArrayBuffer) {\n      return new Uint8Array(data)\n    } else {\n      const originData = new Uint8Array(data)\n      const dataCopy = new Uint8Array(data.byteLength)\n      dataCopy.set(originData)\n      return dataCopy\n    }\n  } else if (ArrayBuffer.isView(data)) { // accept Buffer too.\n    if (shareArrayBuffer) {\n      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength) // DataView, TypedArray >  uint8array( use offset, length )\n    } else {\n      // new memory to protect origin arraybuffer.\n      const originData = new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n      const dataCopy = new Uint8Array(data.byteLength)\n      dataCopy.set(originData)\n      return dataCopy\n    }\n  } else { // array, object\n    return encoder.encode(JSON.stringify(data)) // object(array.. )  > JSON.str > encode > unint8array\n  }\n}\n\nexport const B8 = parseBuffer\n/**\n * Parse data into Buffer\n * @param {any} data - Data to parse\n * @param {boolean} [shareArrayBuffer=false] - Whether to share the input data's array buffer\n * @returns {Buffer} Parsed Buffer\n */\nexport function parseBuffer(data, shareArrayBuffer = false) {\n\n  const u8 = parseUint8Array(data, shareArrayBuffer)\n  if (shareArrayBuffer) {\n    return Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength)\n  } else {\n    return Buffer.from(u8)\n  }\n}\n\nexport const B8pack = parseBufferThenConcat\nexport function parseBufferThenConcat(...dataArray) {\n  const buffers = dataArray.map(data => parseBuffer(data))\n  return Buffer.concat(buffers)\n}\n\n\nexport const U8pack = parseUint8ThenConcat // alias\n/**\n * 1. parse list of data into U8 list\n * 2. return new Uint8Array merged.\n * @param  {...any} dataArray \n * @returns \n */\nexport function parseUint8ThenConcat(...dataArray) {\n  try {\n    let bufferSize = 0\n    let offset = 0\n    const buffers = dataArray.map(data => parseUint8Array(data))\n    buffers.forEach(buf => { bufferSize += buf.byteLength })\n    const buffer = new Uint8Array(bufferSize)\n    buffers.forEach(buf => {\n      buffer.set(buf, offset)\n      offset += buf.byteLength\n    })\n    return buffer\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport function hex(buffer) {\n  return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('')\n}\n\nexport function equal(buf1, buf2) {\n  if (buf1.byteLength !== buf2.byteLength) return false\n  for (let i = 0; i < buf1.byteLength; i++) {\n    if (buf1[i] !== buf2[i]) return false\n  }\n  return true\n}\n\n\nexport function getBufferSize(binPack) {\n  if (getMetaSize(binPack) === 0) {\n    return binPack.byteLength\n  } else {\n    return binPack.byteLength - getMetaSize(binPack) - TAIL_LEN\n  }\n}\n\n// MB and MBA \nexport function parseMetaInfo(binPack, infoSize) {\n  let info;\n  try {\n    const buffer = new Uint8Array(binPack.buffer, binPack.byteOffset, binPack.byteLength)\n    const infoFrom = buffer.byteLength - infoSize - 2\n    const infoEncoded = buffer.subarray(infoFrom, buffer.byteLength - 2)\n    const decoded = decoder.decode(infoEncoded)\n    const info = JSON.parse(decoded)\n\n    if (!Array.isArray(info) || !Array.isArray(info[0])) return\n\n    let firstItem = info[0]\n    if (!firstItem) return\n\n    if (firstItem.length < 3) return\n    const [name, type, offset] = firstItem\n\n    if (typeof type !== 'string' || typeof offset !== 'number') return\n\n    return info\n  } catch (error) {\n    // return undefined\n  }\n}\n\n\n/** \n * Meta buffer pack Tail:\n * binary Pack include TAIL(two bytes size) info at the end if it has JSON info.\n * not include TAIL if it has not JSON.\n */\nexport const TAIL_LEN = 2\n\n/**\n * \n * @param {Buffer|Uint8Array|ArrayBuffer} binPack \n * @returns {Number} last two byte value( read Uint16 bigendian )\n */\nexport function readTail(binPack) {\n  if (binPack instanceof ArrayBuffer) {\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  }\n  if (binPack instanceof Uint8Array) {\n    if (binPack.byteLength <= TAIL_LEN) return 0\n\n    const dv = new DataView(binPack.buffer, binPack.byteOffset, binPack.byteLength)\n    const infoSize = dv.getUint16(binPack.byteLength - TAIL_LEN)  // last 2 bytes for json-info-length.\n    return infoSize\n\n  } else {\n    // throw TypeError('invalid data type.')\n    return 0\n  }\n\n}\n\n\n// binay data pack is not always Buffer.  \n// It should accept Uint8Array binPack.\n// This function don't use Buffer method.\n\nexport function getMetaSize(binPack) {\n  if (binPack instanceof ArrayBuffer) {\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  }\n  if (binPack instanceof Uint8Array) {\n\n    const size = binPack.byteLength\n    if (size <= TAIL_LEN) return 0\n\n    //1. tail size check\n    const infoSize = readTail(binPack)\n    if (infoSize === 0 || infoSize > size) return 0\n    //2. try parse JSON \n    const success = parseMetaInfo(binPack, infoSize)\n    //3. return success: jsonInfoSize,  fail: 0\n    if (success) return infoSize\n    else return 0\n  } else {\n    return 0\n  }\n}\n\n\n/**\n * \n * @param {Buffer|Uint8Array} binPack \n * @returns {Buffer} \n */\nexport function getBuffer(binPack) {\n  const rawBufferSize = getBufferSize(binPack)\n  return binPack.subarray(0, rawBufferSize)\n}\n\n\n\n/**\n * extract Meta info object if it has.\n * \n * @param {Buffer|Uint8Array|ArrayBuffer} binPack \n * @param {Boolean} showDetail add additional item info: full data type name and bytelength.\n * @returns {Object|undefined} success: return MetaInfo Object.   fail: return undefined.(No valid JSON included.)\n */\n/**\n * Extract metadata from buffer\n * @param {Buffer|Uint8Array|ArrayBuffer} binPack - Binary data to extract metadata from\n * @param {boolean} [showDetail=false] - Whether to show detailed information\n * @returns {Object|undefined} Metadata object or undefined if no valid JSON included\n */\nexport function getMeta(binPack, showDetail = false) {\n  if (binPack instanceof ArrayBuffer) {\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  }\n  const infoSize = readTail(binPack)\n  if (infoSize === 0) return\n\n  // check valid Meta\n  let metaInfo = parseMetaInfo(binPack, infoSize)\n  if (!metaInfo) return\n\n  if (!showDetail) {\n    return metaInfo\n  } else {\n    // add additional info\n    metaInfo.forEach(bufPack => {\n      const len = bufPack[3]\n      if (len == undefined) {  // add size info.\n        if (bufPack[1].includes('8')) bufPack[3] = 1\n        else if (bufPack[1].includes('16')) bufPack[3] = 2\n        else if (bufPack[1].includes('32')) bufPack[3] = 4\n        else if (bufPack[1].includes('F')) bufPack[3] = 4\n        else if (bufPack[1].includes('!')) bufPack[3] = 1\n      }\n      bufPack[4] = parseTypeName(bufPack[1])  // add full-type-name.\n    })\n    return metaInfo\n  }\n}\n\nexport function rawPack(...args) {\n  return getBuffer(pack(...args))\n}\n\nexport function meta(...args) {\n  return getMeta(pack(...args))\n}\n\nexport function metaDetail(...args) {\n  return getMeta(pack(...args), true)\n}\n\nexport function getMetaDetail(binPack) {\n  return getMeta(binPack, true)\n}\n"],"names":["ieee754","read","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","i","d","s","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","base64","base64Js","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","length","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Uint8Array","Array","code","Error","indexOf","start","end","num","output","require$$0","require$$1","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","prototype","arg","encodingOrOffset","TypeError","allocUnsafe","from","string","encoding","isEncoding","actual","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","data","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","encoder","TextEncoder","decoder","TextDecoder","NB","numberBuffer","initValue","toUpperCase","MB","metaBuffer","typeOrData","bufferType","JSON","stringify","v","MBA","metaBufferArguments","args","map","argsIndex","parseTypeName","readTypedBuffer","simpleType","strBuffer","decode","strNumber","objEncoded","parse","pack","bufArr","subArr","filter","item","flatArray","info","infoEncoded","infoSize","forEach","bufPack","infoStr","encode","infoSizeBuff","U8","parseUint8Array","shareArrayBuffer","originData","dataCopy","B8","parseBuffer","u8","B8pack","parseBufferThenConcat","dataArray","buffers","U8pack","parseUint8ThenConcat","bufferSize","getBufferSize","binPack","getMetaSize","TAIL_LEN","parseMetaInfo","infoFrom","decoded","firstItem","readTail","DataView","getUint16","getBuffer","rawBufferSize","getMeta","showDetail","metaInfo","buf1","buf2","meta","infoArr","binObj","readCounter","result","leftSize","mbaIndex","$"],"mappings":"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","x_google_ignoreList":[0,1,2]}