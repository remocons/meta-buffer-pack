{"version":3,"file":"meta-buffer-pack.min.js","sources":["../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../src/meta-buffer-pack.js"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { Buffer } from 'buffer/index.js'\nexport { Buffer } \n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\n\nexport const NB = numberBuffer\nexport function numberBuffer(type, initValue = 0) {\n  let buffer\n  if (type === undefined || typeof type !== 'string' || typeof initValue !== 'number') {\n    throw TypeError('invlaid init variablie type name. ')\n  }\n  type = type.toUpperCase()\n\n  if (type.includes('8')) {\n    buffer = Buffer.alloc(1)\n    if (type.includes('I')) buffer.writeInt8(initValue)\n    else buffer.writeUint8(initValue)\n  } else if (type.includes('16')) {\n    buffer = Buffer.alloc(2)\n    if (type.includes('I')) {\n      if (type.includes('L')) buffer.writeInt16LE(initValue)\n      else buffer.writeInt16BE(initValue)\n    } else {\n      if (type.includes('L')) buffer.writeUint16LE(initValue)\n      else buffer.writeUint16BE(initValue)\n    }\n  } else if (type.includes('32')) {\n    buffer = Buffer.alloc(4)\n    if (type.includes('I')) {\n      if (type.includes('L')) buffer.writeInt32LE(initValue)\n      else buffer.writeInt32BE(initValue)\n    } else {\n      if (type.includes('L')) buffer.writeUint32LE(initValue)\n      else buffer.writeUint32BE(initValue)\n    }\n  } else if (type.includes('F')) {\n    buffer = Buffer.alloc(4)\n    if (type.includes('L')) {\n      buffer.writeFloatLE(initValue)\n    } else {\n      buffer.writeFloatBE(initValue)\n    }\n  } else if (type.includes('N')) { // number as string\n    buffer = Buffer.from(String(initValue))\n  } else {\n    console.log(`invalid type: ${type} or initvalue: ${initValue}`)\n  }\n  return buffer\n}\n\n\nexport const MB = metaBuffer\nexport function metaBuffer(name, typeOrData, initValue) {\n  let buffer\n  let bufferType = 'B'\n  if (typeof typeOrData === 'number') {\n    if (typeof initValue === 'number') {  // initValue 0 should be passed.\n      buffer = Buffer.alloc(typeOrData)\n      if (initValue !== 0) buffer.fill(initValue)\n      bufferType = 'B'\n    } else {\n      buffer = Buffer.from(String(typeOrData))\n      bufferType = 'N'\n    }\n  } else if (typeof typeOrData === 'string' && typeof initValue === 'number') { // number with type.\n    bufferType = typeOrData.toUpperCase() // use explicit type name\n    buffer = numberBuffer(typeOrData, initValue) // notice.  two categories.  n: number string.  8, 16, 32: typed number.\n  } else if (typeof typeOrData === 'string' && initValue === undefined) { //  string buffer\n    buffer = Buffer.from(typeOrData)\n    bufferType = 'S'\n  } else if (typeOrData instanceof Uint8Array && initValue === undefined) { // buffer | Uint8Array\n    // Buffer.from:  Copies the passed buffer data onto a new Buffer instance.\n    // typecasting Uint8Array to Buffer.\n    buffer = (typeOrData instanceof Buffer) ? typeOrData : Buffer.from(typeOrData)\n  } else if (typeOrData instanceof ArrayBuffer && initValue === undefined) { // arrayBuffer\n    // Notice. typedArray is recommended instead of arrayBuffer\n    buffer = Buffer.from(typeOrData)\n  } else if (ArrayBuffer.isView(typeOrData)) { // typedarray buffer\n    buffer = Buffer.from(typeOrData.buffer, typeOrData.byteOffset, typeOrData.byteLength)\n  } else if (typeof typeOrData === 'object' && initValue === undefined) { //   object. like array. stringify\n    buffer = Buffer.from(JSON.stringify(typeOrData))\n    bufferType = 'O'\n  } else if (typeof typeOrData === 'boolean' && initValue === undefined) { //   object. like array. stringify\n    const v = typeOrData ? 1 : 0\n    buffer = Buffer.from([v])\n    bufferType = '!'\n  } else {\n    throw TypeError('invalid meta buffer type')\n  }\n\n  if (typeof name === 'string' && name.includes('#')) name = '' //\n\n  return [name, bufferType, buffer]\n}\n\nexport const MBA = metaBufferArguments\nexport function metaBufferArguments(...args) {\n  let i = 0\n  const mba = args.map(\n    data => {\n      const argsIndex = i++\n      // tip. MBA use index number as metabuffer's property name.\n      if (typeof data === 'number') {\n        // * JS's primitive Number stored as string.\n        return MB(argsIndex, 'N', data)\n      } else {\n        // typedarray, dataview, array, object, boolean\n        return MB(argsIndex, data)\n      }\n    })\n\n  return mba\n}\n\nexport function parseTypeName(type) {\n  type = type.toUpperCase()\n\n  if (type.includes('8')) {\n    if (type.includes('I')) {\n      return 'int8'\n    } else {\n      return 'uint8'\n    }\n  } else if (type.includes('16')) {\n    if (type.includes('I')) {\n      if (type.includes('L')) {\n        return 'int16_le'\n      } else {\n        return 'int16_be'\n      }\n    } else {\n      if (type.includes('L')) {\n        return 'uint16_le'\n      } else {\n        return 'uint16_be'\n      }\n    }\n  } else if (type.includes('32')) {\n    if (type.includes('I')) {\n      if (type.includes('L')) {\n        return 'int32_le'\n      } else {\n        return 'int32_be'\n      }\n    } else {\n      if (type.includes('L')) {\n        return 'uint32_le'\n      } else {\n        return 'uint32_be'\n      }\n    }\n  } else if (type.includes('F')) {\n    if (type.includes('L')) {\n      return 'float_le'\n    } else {\n      return 'float_be'\n    }\n  } else if (type === 'B') {\n    return 'buffer'\n  } else if (type === 'S') { // string or arguments\n    return 'string'\n  } else if (type === 'N') { // number encoded as string\n    return 'number'\n  } else if (type === 'O') { // object encoded string\n    return 'object'\n  } else if (type === '!') { // boolean  1:true 0:false\n    return 'boolean'\n  } else {\n    throw TypeError('invalid data type')\n  }\n\n}\n\nexport function readTypedBuffer(simpleType, buffer, offset, length) {\n  try {\n    const type = parseTypeName(simpleType)\n    if (type == 'int8') return buffer.readInt8(offset)\n    else if (type === 'uint8') return buffer.readUint8(offset)\n    else if (type === 'int16_le') return buffer.readInt16LE(offset)\n    else if (type === 'int16_be') return buffer.readInt16BE(offset)\n    else if (type === 'uint16_le') return buffer.readUint16LE(offset)\n    else if (type === 'uint16_be') return buffer.readUint16BE(offset)\n    else if (type === 'int32_le') return buffer.readInt32LE(offset)\n    else if (type === 'int32_be') return buffer.readInt32BE(offset)\n    else if (type === 'uint32_le') return buffer.readUint32LE(offset)\n    else if (type === 'uint32_be') return buffer.readUint32BE(offset)\n    else if (type === 'float_le') return buffer.readFloatLE(offset)\n    else if (type === 'float_be') return buffer.readFloatBE(offset)\n\n    else if (type === 'buffer') {\n      return buffer.subarray(offset, offset + length)\n    } else if (type === 'string') {\n      const strBuffer = buffer.subarray(offset, offset + length)\n      return decoder.decode(strBuffer)\n    } else if (type === 'number') {\n      const strNumber = buffer.subarray(offset, offset + length)\n      return Number(decoder.decode(strNumber))\n    } else if (type === 'object') {\n      const objEncoded = buffer.subarray(offset, offset + length)\n      return JSON.parse(decoder.decode(objEncoded))\n    } else if (type === 'boolean') {\n      const v = buffer.readInt8(offset)\n      return v === 1\n    } else {\n      return\n    }\n  } catch (error) {\n    // console.log('MBP:readTypedBuffer obj decoding error.', error)\n  }\n  // any error and invalid data return undefined \n  return\n}\n\n// to join MBA or MB meta list.\nfunction flatArray(args) {\n  let subArr = []\n  const mainArr = args.filter(item => {\n    if (Array.isArray(item[0])) subArr = subArr.concat(item)\n    else return item\n  })\n  return mainArr.concat(subArr)\n}\n\nexport function pack(...args) {\n  const bufArr = flatArray(args)\n  // console.log('MBP.pack: flat MB or MBA list', bufArr)\n  let size = 0\n  const info = []\n  let offset = 0\n\n  bufArr.forEach(bufPack => {\n    const [name, type, data] = bufPack\n    size += data.byteLength\n\n    if (typeof name === 'number' || name.length > 0) {\n      // if the item has property name then add meta JSON info.\n      // type of name is Number in MBA.(index number)\n      // type of name is String in MB. except null string.\n      // add additional informative meta info.  \n      info.push([name, type, offset, data.byteLength])\n    }\n    offset = size\n  })\n\n\n  // console.log('MBP.pack meta:', info )\n  let infoEncoded\n  let infoSize\n\n  if (info.length > 0) {\n    let infoStr = JSON.stringify(info)\n    // console.log('pack infoStr , size:', infoStr , infoStr.length )\n    infoEncoded = encoder.encode(infoStr)\n    infoSize = infoEncoded.byteLength\n    size = size + infoSize + 2\n  }\n\n  const buffer = Buffer.alloc(size)\n  offset = 0\n  bufArr.forEach(bufPack => {\n    const buf = bufPack[2]\n    buffer.set(buf, offset)\n    offset += buf.byteLength\n  })\n\n  if (info.length > 0) {\n    buffer.set(infoEncoded, offset)\n    const infoSizeBuff = NB('16', infoSize)\n    buffer.set(infoSizeBuff, offset + infoSize)\n    return buffer\n  } else {\n    return buffer\n  }\n}\n\n\n/**\n * unpack() will use embeded meta info from the binary pack.  \n * You can specify (optional) meta obejct. \n * (It's useful to read pure buffer data.)\n * \n * You can get the meta object from:  getFrame(pack) , meta()\n * @param {Buffer|Uint8Array} binPack binaryData\n * @param {Object} meta *OPTION*  \n * @returns {Object|undefined} success: return Object (include buffer data).   fail: return undefined\n */\nexport function unpack(binPack, meta) {\n\n  const infoArr = meta || getMeta(binPack)\n  if (!infoArr) return\n\n  const buffer = Buffer.from(binPack)\n  const binObj = {}\n  let readCounter = 0\n  infoArr.forEach(bufPack => {\n    const [name, type, offset, length] = bufPack\n    let result = readTypedBuffer(type, buffer, offset, length)\n    if (result == undefined) return\n    binObj[name] = result\n    if (length) readCounter += length\n  })\n\n  // Can not define meta for variable size buffer \n  // unpacker support automatic property to read left(did't read) buffers.\n  // console.log(\"######, unpack: buffer \" , readCounter, buffer ,buffer.byteLength)\n  if (meta && buffer.byteLength !== readCounter) {\n    let leftSize = buffer.byteLength - readCounter\n    // console.log('total,left buffer size', buffer.byteLength, leftSize )\n    let result = readTypedBuffer('b', buffer, readCounter, leftSize)\n    if (result == undefined) return\n    binObj[\"$OTHERS\"] = result\n  }\n\n  // set args with values if exist.\n  let mbaIndex = 0;\n  let args = [];\n  while (binObj[mbaIndex]) {\n    args.push(binObj[mbaIndex++])\n  }\n\n  if (args.length > 0) {\n    binObj.args = args\n    binObj.$ = binObj.args\n  }\n  return binObj\n}\n\n\nexport const U8 = parseUint8Array   //alias\n/**\n * \n * @param {any} data \n * @param {Boolean} shareArrayBuffer false(default):  return new( or copied) ArrayBuffer.    true: share the input data's arrayBuffer.\n * @returns {Uint8Array}\n */\nexport function parseUint8Array(data, shareArrayBuffer = false) {\n  if (data === undefined) throw TypeError('Invalid data type: Undefined')\n  if (typeof data === 'string') {\n    return encoder.encode(data)\n  } else if (typeof data === 'number') { // number -> 1 byte uint8array(number)\n    return Uint8Array.from([data])\n  } else if (data instanceof ArrayBuffer) { // arraybuffer -> wrap uint8array(ab)\n    if (shareArrayBuffer) {\n      return new Uint8Array(data)\n    } else {\n      const originData = new Uint8Array(data)\n      const dataCopy = new Uint8Array(data.byteLength)\n      dataCopy.set(originData)\n      return dataCopy\n    }\n  } else if (ArrayBuffer.isView(data)) { // accept Buffer too.\n    if (shareArrayBuffer) {\n      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength) // DataView, TypedArray >  uint8array( use offset, length )\n    } else {\n      // new memory to protect origin arraybuffer.\n      const originData = new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n      const dataCopy = new Uint8Array(data.byteLength)\n      dataCopy.set(originData)\n      return dataCopy\n    }\n  } else { // array, object\n    return encoder.encode(JSON.stringify(data)) // object(array.. )  > JSON.str > encode > unint8array\n  }\n}\n\nexport const B8 = parseBuffer\nexport function parseBuffer(data, shareArrayBuffer = false) {\n\n  const u8 = parseUint8Array(data, shareArrayBuffer)\n  if (shareArrayBuffer) {\n    return Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength)\n  } else {\n    return Buffer.from(u8)\n  }\n}\n\nexport const B8pack = parseBufferThenConcat\nexport function parseBufferThenConcat(...dataArray) {\n  const buffers = dataArray.map(data => parseBuffer(data))\n  return Buffer.concat(buffers)\n}\n\n\nexport const U8pack = parseUint8ThenConcat // alias\n/**\n * 1. parse list of data into U8 list\n * 2. return new Uint8Array merged.\n * @param  {...any} dataArray \n * @returns \n */\nexport function parseUint8ThenConcat(...dataArray) {\n  try {\n    let bufferSize = 0\n    let offset = 0\n    const buffers = dataArray.map(data => parseUint8Array(data))\n    buffers.forEach(buf => { bufferSize += buf.byteLength })\n    const buffer = new Uint8Array(bufferSize)\n    buffers.forEach(buf => {\n      buffer.set(buf, offset)\n      offset += buf.byteLength\n    })\n    return buffer\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport function hex(buffer) {\n  return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('')\n}\n\nexport function equal(buf1, buf2) {\n  if (buf1.byteLength !== buf2.byteLength) return false\n  for (let i = 0; i < buf1.byteLength; i++) {\n    if (buf1[i] !== buf2[i]) return false\n  }\n  return true\n}\n\n\nexport function getBufferSize(binPack) {\n  if (getMetaSize(binPack) === 0) {\n    return binPack.byteLength\n  } else {\n    return binPack.byteLength - getMetaSize(binPack) - TAIL_LEN\n  }\n}\n\n// MB and MBA \nexport function parseMetaInfo(binPack, infoSize) {\n  let info;\n  try {\n    const buffer = new Uint8Array(binPack.buffer, binPack.byteOffset, binPack.byteLength)\n    const infoFrom = buffer.byteLength - infoSize - 2\n    const infoEncoded = buffer.subarray(infoFrom, buffer.byteLength - 2)\n    const decoded = decoder.decode(infoEncoded)\n    const info = JSON.parse(decoded)\n\n    if (!Array.isArray(info) || !Array.isArray(info[0])) return\n\n    let firstItem = info[0]\n    if (!firstItem) return\n\n    if (firstItem.length < 3) return\n    const [name, type, offset] = firstItem\n\n    if (typeof type !== 'string' || typeof offset !== 'number') return\n\n    return info\n  } catch (error) {\n    // return undefined\n  }\n}\n\n\n/** \n * Meta buffer pack Tail:\n * binary Pack include TAIL(two bytes size) info at the end if it has JSON info.\n * not include TAIL if it has not JSON.\n */\nexport const TAIL_LEN = 2\n\n/**\n * \n * @param {Buffer|Uint8Array|ArrayBuffer} binPack \n * @returns {Number} last two byte value( read Uint16 bigendian )\n */\nexport function readTail(binPack) {\n  if (binPack instanceof ArrayBuffer) {\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  }\n  if (binPack instanceof Uint8Array) {\n    if (binPack.byteLength <= TAIL_LEN) return 0\n\n    const dv = new DataView(binPack.buffer, binPack.byteOffset, binPack.byteLength)\n    const infoSize = dv.getUint16(binPack.byteLength - TAIL_LEN)  // last 2 bytes for json-info-length.\n    return infoSize\n\n  } else {\n    // throw TypeError('invalid data type.')\n    return 0\n  }\n\n}\n\n\n// binay data pack is not always Buffer.  \n// It should accept Uint8Array binPack.\n// This function don't use Buffer method.\n\nexport function getMetaSize(binPack) {\n  if (binPack instanceof ArrayBuffer) {\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  }\n  if (binPack instanceof Uint8Array) {\n\n    const size = binPack.byteLength\n    if (size <= TAIL_LEN) return 0\n\n    //1. tail size check\n    const infoSize = readTail(binPack)\n    if (infoSize === 0 || infoSize > size) return 0\n    //2. try parse JSON \n    const success = parseMetaInfo(binPack, infoSize)\n    //3. return success: jsonInfoSize,  fail: 0\n    if (success) return infoSize\n    else return 0\n  } else {\n    return 0\n  }\n}\n\n\n/**\n * \n * @param {Buffer|Uint8Array} binPack \n * @returns {Buffer} \n */\nexport function getBuffer(binPack) {\n  const rawBufferSize = getBufferSize(binPack)\n  return binPack.subarray(0, rawBufferSize)\n}\n\n\n\n/**\n * extract Meta info object if it has.\n * \n * @param {Buffer|Uint8Array|ArrayBuffer} binPack \n * @param {Boolean} showDetail add additional item info: full data type name and bytelength.\n * @returns {Object|undefined} success: return MetaInfo Object.   fail: return undefined.(No valid JSON included.)\n */\nexport function getMeta(binPack, showDetail = false) {\n  if (binPack instanceof ArrayBuffer) {\n    binPack = Buffer.from(binPack) // creates a view for ArrayBuffer, without copying.\n  }\n  const infoSize = readTail(binPack)\n  if (infoSize === 0) return\n\n  // check valid Meta\n  let metaInfo = parseMetaInfo(binPack, infoSize)\n  if (!metaInfo) return\n\n  if (!showDetail) {\n    return metaInfo\n  } else {\n    // add additional info\n    metaInfo.forEach(bufPack => {\n      const len = bufPack[3]\n      if (len == undefined) {  // add size info.\n        if (bufPack[1].includes('8')) bufPack[3] = 1\n        else if (bufPack[1].includes('16')) bufPack[3] = 2\n        else if (bufPack[1].includes('32')) bufPack[3] = 4\n        else if (bufPack[1].includes('F')) bufPack[3] = 4\n        else if (bufPack[1].includes('!')) bufPack[3] = 1\n      }\n      bufPack[4] = parseTypeName(bufPack[1])  // add full-type-name.\n    })\n    return metaInfo\n  }\n}\n\nexport function rawPack(...args) {\n  return getBuffer(pack(...args))\n}\n\nexport function meta(...args) {\n  return getMeta(pack(...args))\n}\n\nexport function metaDetail(...args) {\n  return getMeta(pack(...args), true)\n}\n\nexport function getMetaDetail(binPack) {\n  return getMeta(binPack, true)\n}\n"],"names":["base64Js","b64","lens","getLens","validLen","placeHoldersLen","tmp","i","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","uint8","length","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Uint8Array","Array","code","Error","indexOf","start","end","num","output","ieee754","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","Math","pow","value","c","rt","abs","isNaN","floor","log","LN2","base64","require$$0","require$$1","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","prototype","arg","encodingOrOffset","TypeError","allocUnsafe","from","string","encoding","isEncoding","byteLength","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","data","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","INVALID_BASE64_RE","leadSurrogate","toByteArray","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","encoder","TextEncoder","decoder","TextDecoder","NB","numberBuffer","initValue","toUpperCase","MB","metaBuffer","typeOrData","bufferType","JSON","stringify","v","MBA","metaBufferArguments","args","map","argsIndex","parseTypeName","readTypedBuffer","simpleType","strBuffer","decode","strNumber","objEncoded","parse","pack","bufArr","subArr","filter","item","flatArray","info","infoEncoded","infoSize","forEach","bufPack","infoStr","encode","infoSizeBuff","U8","parseUint8Array","shareArrayBuffer","originData","dataCopy","B8","parseBuffer","u8","B8pack","parseBufferThenConcat","dataArray","buffers","U8pack","parseUint8ThenConcat","bufferSize","getBufferSize","binPack","getMetaSize","TAIL_LEN","parseMetaInfo","infoFrom","decoded","firstItem","readTail","DataView","getUint16","getBuffer","rawBufferSize","getMeta","showDetail","metaInfo","buf1","buf2","meta","infoArr","binObj","readCounter","result","leftSize","mbaIndex","$"],"mappings":"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","x_google_ignoreList":[0,1,2]}